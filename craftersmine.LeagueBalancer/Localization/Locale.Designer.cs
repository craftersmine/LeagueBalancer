//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace craftersmine.LeagueBalancer.Localization {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Locale {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Locale() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("craftersmine.LeagueBalancer.Localization.Locale", typeof(Locale).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Copy Info to Clipboard.
        /// </summary>
        public static string CrashHandlerWindow_Buttons_CopyToClipboard {
            get {
                return ResourceManager.GetString("CrashHandlerWindow.Buttons.CopyToClipboard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Open GitHub Issues.
        /// </summary>
        public static string CrashHandlerWindow_Buttons_OpenIssues {
            get {
                return ResourceManager.GetString("CrashHandlerWindow.Buttons.OpenIssues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Close application.
        /// </summary>
        public static string CrashHandlerWindow_Buuttons_CloseApp {
            get {
                return ResourceManager.GetString("CrashHandlerWindow.Buuttons.CloseApp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на In order to debug and fix the problem, please open an issue at project GitHub page. Please include following information in text format..
        /// </summary>
        public static string CrashHandlerWindow_Description {
            get {
                return ResourceManager.GetString("CrashHandlerWindow.Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Exception message:.
        /// </summary>
        public static string CrashHandlerWindow_Label_ExceptionMessage {
            get {
                return ResourceManager.GetString("CrashHandlerWindow.Label.ExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Exception stacktrace:.
        /// </summary>
        public static string CrashHandlerWindow_Label_ExceptionStacktrace {
            get {
                return ResourceManager.GetString("CrashHandlerWindow.Label.ExceptionStacktrace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Exception type:.
        /// </summary>
        public static string CrashHandlerWindow_Label_ExceptionType {
            get {
                return ResourceManager.GetString("CrashHandlerWindow.Label.ExceptionType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unfortunately, the application has crashed!.
        /// </summary>
        public static string CrashHandlerWindow_Title {
            get {
                return ResourceManager.GetString("CrashHandlerWindow.Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Add Player.
        /// </summary>
        public static string MainWindow_Buttons_AddSummoner_ToolTip {
            get {
                return ResourceManager.GetString("MainWindow.Buttons.AddSummoner.ToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на BALANCE.
        /// </summary>
        public static string MainWindow_Buttons_Balance {
            get {
                return ResourceManager.GetString("MainWindow.Buttons.Balance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Balance teams by LP.
        /// </summary>
        public static string MainWindow_Buttons_Balance_ToolTip {
            get {
                return ResourceManager.GetString("MainWindow.Buttons.Balance.ToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Clear Players list.
        /// </summary>
        public static string MainWindow_Buttons_ClearSummonersList_ToolTip {
            get {
                return ResourceManager.GetString("MainWindow.Buttons.ClearSummonersList.ToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Copy all players characters into clipboard.
        /// </summary>
        public static string MainWindow_Buttons_CopySummonersListToClipboard_ToolTip {
            get {
                return ResourceManager.GetString("MainWindow.Buttons.CopySummonersListToClipboard.ToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Get Randomized Champions For All.
        /// </summary>
        public static string MainWindow_Buttons_GetRandomCharacters {
            get {
                return ResourceManager.GetString("MainWindow.Buttons.GetRandomCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Roll champions for every player.
        /// </summary>
        public static string MainWindow_Buttons_GetRandomCharacters_ToolTip {
            get {
                return ResourceManager.GetString("MainWindow.Buttons.GetRandomCharacters.ToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Import players from lobby chat.
        /// </summary>
        public static string MainWindow_Buttons_ImportFromClipboard_ToolTip {
            get {
                return ResourceManager.GetString("MainWindow.Buttons.ImportFromClipboard.ToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Open/Hide Champions List in text form.
        /// </summary>
        public static string MainWindow_Buttons_OpenHideChampionsList {
            get {
                return ResourceManager.GetString("MainWindow.Buttons.OpenHideChampionsList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Opens or hides champions list in text form that you can copy.
        /// </summary>
        public static string MainWindow_Buttons_OpenHideChampionsList_ToolTip {
            get {
                return ResourceManager.GetString("MainWindow.Buttons.OpenHideChampionsList.ToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Remove Player.
        /// </summary>
        public static string MainWindow_Buttons_RemoveSummoner_ToolTip {
            get {
                return ResourceManager.GetString("MainWindow.Buttons.RemoveSummoner.ToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Reroll Summoner Champions.
        /// </summary>
        public static string MainWindow_Buttons_RerollSummonerCharacters {
            get {
                return ResourceManager.GetString("MainWindow.Buttons.RerollSummonerCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Reroll champions for selected player.
        /// </summary>
        public static string MainWindow_Buttons_RerollSummonerCharacters_ToolTip {
            get {
                return ResourceManager.GetString("MainWindow.Buttons.RerollSummonerCharacters.ToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select a player region.
        /// </summary>
        public static string MainWindow_ComboBox_Region_ToolTip {
            get {
                return ResourceManager.GetString("MainWindow.ComboBox.Region.ToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Made by craftersmine with ❤️ - App version.
        /// </summary>
        public static string MainWindow_Copyright {
            get {
                return ResourceManager.GetString("MainWindow.Copyright", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This application was created under Riot Games&apos; &quot;Legal Jibber Jabber&quot; policy using assets owned by Riot Games. Riot Games does not endorse or sponsor this project..
        /// </summary>
        public static string MainWindow_Disclaimer {
            get {
                return ResourceManager.GetString("MainWindow.Disclaimer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Available Pool:.
        /// </summary>
        public static string MainWindow_Label_AvailableCharacterPool {
            get {
                return ResourceManager.GetString("MainWindow.Label.AvailableCharacterPool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Blue Team.
        /// </summary>
        public static string MainWindow_Label_BlueTeam {
            get {
                return ResourceManager.GetString("MainWindow.Label.BlueTeam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select player in players list to generate champions.
        /// </summary>
        public static string MainWindow_Label_ChampionsListTip {
            get {
                return ResourceManager.GetString("MainWindow.Label.ChampionsListTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Red Team.
        /// </summary>
        public static string MainWindow_Label_RedTeam {
            get {
                return ResourceManager.GetString("MainWindow.Label.RedTeam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 🔗 Report a Bug.
        /// </summary>
        public static string MainWindow_Links_BugReport {
            get {
                return ResourceManager.GetString("MainWindow.Links.BugReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 🔗 GitHub Page.
        /// </summary>
        public static string MainWindow_Links_GitHub {
            get {
                return ResourceManager.GetString("MainWindow.Links.GitHub", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 🔗 Request a feature.
        /// </summary>
        public static string MainWindow_Links_RequestFeature {
            get {
                return ResourceManager.GetString("MainWindow.Links.RequestFeature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 🔄️ Update Available!.
        /// </summary>
        public static string MainWindow_Links_UpdateAvailable {
            get {
                return ResourceManager.GetString("MainWindow.Links.UpdateAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Mastery points: .
        /// </summary>
        public static string MainWindow_List_Champions_Mastery {
            get {
                return ResourceManager.GetString("MainWindow.List.Champions.Mastery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Lvl: .
        /// </summary>
        public static string MainWindow_List_Summoners_Label_Level {
            get {
                return ResourceManager.GetString("MainWindow.List.Summoners.Label.Level", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Rank:.
        /// </summary>
        public static string MainWindow_List_Summoners_Label_Rank {
            get {
                return ResourceManager.GetString("MainWindow.List.Summoners.Label.Rank", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unable to access Riot Games API due to issue with Application API key! Contact app developer about this error!.
        /// </summary>
        public static string MainWindow_Message_BrokenApiKey_Content {
            get {
                return ResourceManager.GetString("MainWindow.Message.BrokenApiKey.Content", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Expired or broken API key!.
        /// </summary>
        public static string MainWindow_Message_BrokenApiKey_Title {
            get {
                return ResourceManager.GetString("MainWindow.Message.BrokenApiKey.Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на RiotID Tagline isn&apos;t specified! Specify correct RiotID in this format: username#tag.
        /// </summary>
        public static string MainWindow_Message_InvalidRiotId_Content {
            get {
                return ResourceManager.GetString("MainWindow.Message.InvalidRiotId.Content", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Invalid RiotID.
        /// </summary>
        public static string MainWindow_Message_InvalidRiotId_Title {
            get {
                return ResourceManager.GetString("MainWindow.Message.InvalidRiotId.Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unable to access Riot Games API due to being rate-limited! Try again after {0}.
        /// </summary>
        public static string MainWindow_Message_RateLimited_Content {
            get {
                return ResourceManager.GetString("MainWindow.Message.RateLimited.Content", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Rate-limited!.
        /// </summary>
        public static string MainWindow_Message_RateLimited_Title {
            get {
                return ResourceManager.GetString("MainWindow.Message.RateLimited.Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unable to player find &quot;{0}#{1}&quot; on {2} server! Check if RiotID is correct and selected right server..
        /// </summary>
        public static string MainWindow_Message_UnableToFindPlayer_Content {
            get {
                return ResourceManager.GetString("MainWindow.Message.UnableToFindPlayer.Content", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unable to find player!.
        /// </summary>
        public static string MainWindow_Message_UnableToFindPlayer_Title {
            get {
                return ResourceManager.GetString("MainWindow.Message.UnableToFindPlayer.Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unable to access Riot Games API due to unknown error! {0}.
        /// </summary>
        public static string MainWindow_Message_UnknownError_Content {
            get {
                return ResourceManager.GetString("MainWindow.Message.UnknownError.Content", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Failed!.
        /// </summary>
        public static string MainWindow_Message_UnknownError_Title {
            get {
                return ResourceManager.GetString("MainWindow.Message.UnknownError.Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Amount of characters to generate.
        /// </summary>
        public static string MainWindow_Slider_AvailableCharacterPoolSize_ToolTip {
            get {
                return ResourceManager.GetString("MainWindow.Slider.AvailableCharacterPoolSize.ToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Rolled champions:
        ///{0}.
        /// </summary>
        public static string MainWindow_String_RolledChampions {
            get {
                return ResourceManager.GetString("MainWindow.String.RolledChampions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Riot ID (e.g. craftersmine#Ornn).
        /// </summary>
        public static string MainWindow_TextBox_RiotId_ToolTip {
            get {
                return ResourceManager.GetString("MainWindow.TextBox.RiotId.ToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на League of Legends Custom Game Team Balancer.
        /// </summary>
        public static string MainWindow_Title {
            get {
                return ResourceManager.GetString("MainWindow.Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Bronze.
        /// </summary>
        public static string RankedTier_Bronze {
            get {
                return ResourceManager.GetString("RankedTier.Bronze", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Challenger.
        /// </summary>
        public static string RankedTier_Challenger {
            get {
                return ResourceManager.GetString("RankedTier.Challenger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Diamond.
        /// </summary>
        public static string RankedTier_Diamond {
            get {
                return ResourceManager.GetString("RankedTier.Diamond", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Emerald.
        /// </summary>
        public static string RankedTier_Emerald {
            get {
                return ResourceManager.GetString("RankedTier.Emerald", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Gold.
        /// </summary>
        public static string RankedTier_Gold {
            get {
                return ResourceManager.GetString("RankedTier.Gold", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Grandmaster.
        /// </summary>
        public static string RankedTier_Grandmaster {
            get {
                return ResourceManager.GetString("RankedTier.Grandmaster", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Iron.
        /// </summary>
        public static string RankedTier_Iron {
            get {
                return ResourceManager.GetString("RankedTier.Iron", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Master.
        /// </summary>
        public static string RankedTier_Master {
            get {
                return ResourceManager.GetString("RankedTier.Master", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Platinum.
        /// </summary>
        public static string RankedTier_Platinum {
            get {
                return ResourceManager.GetString("RankedTier.Platinum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Silver.
        /// </summary>
        public static string RankedTier_Silver {
            get {
                return ResourceManager.GetString("RankedTier.Silver", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unranked.
        /// </summary>
        public static string RankedTier_Unranked {
            get {
                return ResourceManager.GetString("RankedTier.Unranked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Brazil.
        /// </summary>
        public static string Region_Brazil {
            get {
                return ResourceManager.GetString("Region.Brazil", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Europe Nordic East.
        /// </summary>
        public static string Region_EuropeNordicEast {
            get {
                return ResourceManager.GetString("Region.EuropeNordicEast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Europe West.
        /// </summary>
        public static string Region_EuropeWest {
            get {
                return ResourceManager.GetString("Region.EuropeWest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Japan.
        /// </summary>
        public static string Region_Japan {
            get {
                return ResourceManager.GetString("Region.Japan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Korea.
        /// </summary>
        public static string Region_Korea {
            get {
                return ResourceManager.GetString("Region.Korea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Latin America North.
        /// </summary>
        public static string Region_LatinAmericaNorth {
            get {
                return ResourceManager.GetString("Region.LatinAmericaNorth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Latin America South.
        /// </summary>
        public static string Region_LatinAmericaSouth {
            get {
                return ResourceManager.GetString("Region.LatinAmericaSouth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на North America.
        /// </summary>
        public static string Region_NorthAmerica {
            get {
                return ResourceManager.GetString("Region.NorthAmerica", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Oceania.
        /// </summary>
        public static string Region_Oceania {
            get {
                return ResourceManager.GetString("Region.Oceania", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Philippines.
        /// </summary>
        public static string Region_Philippines {
            get {
                return ResourceManager.GetString("Region.Philippines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Russia and CIS.
        /// </summary>
        public static string Region_Russia {
            get {
                return ResourceManager.GetString("Region.Russia", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Singapore.
        /// </summary>
        public static string Region_Singapore {
            get {
                return ResourceManager.GetString("Region.Singapore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Taiwan.
        /// </summary>
        public static string Region_Taiwan {
            get {
                return ResourceManager.GetString("Region.Taiwan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Thailand.
        /// </summary>
        public static string Region_Thailand {
            get {
                return ResourceManager.GetString("Region.Thailand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Turkey.
        /// </summary>
        public static string Region_Turkey {
            get {
                return ResourceManager.GetString("Region.Turkey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Vietnam.
        /// </summary>
        public static string Region_Vietnam {
            get {
                return ResourceManager.GetString("Region.Vietnam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на OK.
        /// </summary>
        public static string SettingsWindow_Buttons_Ok {
            get {
                return ResourceManager.GetString("SettingsWindow.Buttons.Ok", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Application Language:.
        /// </summary>
        public static string SettingsWindow_Label_Language {
            get {
                return ResourceManager.GetString("SettingsWindow.Label.Language", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Settings.
        /// </summary>
        public static string SettingsWindow_Title {
            get {
                return ResourceManager.GetString("SettingsWindow.Title", resourceCulture);
            }
        }
    }
}
